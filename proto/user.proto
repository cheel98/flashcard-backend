syntax = "proto3";

package user;

option go_package = "proto/generated/user";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Flashcard Backend User API";
    version: "1.0";
    description: "用户管理相关的API接口";
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

// User服务定义
service UserService {
  // 用户注册
  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/api/v1/user/register"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "用户注册";
      description: "创建新用户账户";
      tags: "用户管理";
    };
  }
  
  rpc VerifyCaptcha(CaptchaRequest) returns (BoolResponse) {
    option (google.api.http) = {
      post: "/api/v1/user/verify-captcha"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "验证验证码";
      description: "验证邮箱验证码";
      tags: "用户管理";
    };
  }
  
  rpc SendEmailCaptcha(SendCaptchaRequest) returns (BoolResponse) {
    option (google.api.http) = {
      post: "/api/v1/user/send-captcha"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "发送邮箱验证码";
      description: "向指定邮箱发送验证码";
      tags: "用户管理";
    };
  }
  
  // 修改用户信息
  rpc EditSetting(EditSettingRequest) returns (BoolResponse) {
    option (google.api.http) = {
      put: "/api/v1/user/settings"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "修改用户设置";
      description: "更新用户设置信息";
      tags: "用户管理";
    };
  }
  
  rpc EditPreference(EditPreferenceRequest) returns (BoolResponse) {
    option (google.api.http) = {
      put: "/api/v1/user/preferences"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "修改用户偏好";
      description: "更新用户偏好设置";
      tags: "用户管理";
    };
  }
  
  // 用户登录
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/user/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "用户登录";
      description: "用户登录获取访问令牌";
      tags: "用户管理";
    };
  }
  
  // 刷新访问令牌
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/api/v1/user/refresh-token"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "刷新访问令牌";
      description: "使用刷新令牌获取新的访问令牌";
      tags: "用户管理";
    };
  }
  
  // 用户登出
  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/api/v1/user/logout"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "用户登出";
      description: "用户登出并清除令牌";
      tags: "用户管理";
    };
  }
  
  // 获取用户信息
  rpc GetUserByEmail(GetUserByEmailRequest) returns (GetUserByEmailResponse) {
    option (google.api.http) = {
      get: "/api/v1/user/email/{email}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "根据邮箱获取用户信息";
      description: "通过邮箱地址查询用户详细信息";
      tags: "用户管理";
    };
  }
  
  // 获取用户设置
  rpc GetUserSettings(GetUserSettingsRequest) returns (GetUserSettingsResponse) {
    option (google.api.http) = {
      get: "/api/v1/user/{user_id}/settings"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取用户设置";
      description: "获取指定用户的设置信息";
      tags: "用户管理";
    };
  }
  
  // 获取用户偏好
  rpc GetUserPreferences(GetUserPreferencesRequest) returns (GetUserPreferencesResponse) {
    option (google.api.http) = {
      get: "/api/v1/user/{user_id}/preferences"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取用户偏好";
      description: "获取指定用户的偏好设置";
      tags: "用户管理";
    };
  }
  
  // 获取用户日志
  rpc GetUserLogs(GetUserLogsRequest) returns (GetUserLogsResponse) {
    option (google.api.http) = {
      get: "/api/v1/user/{user_id}/logs"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取用户日志";
      description: "获取指定用户的操作日志";
      tags: "用户管理";
    };
  }
}

message EditSettingRequest {
  UserSettings user_setting = 1;
}
message EditPreferenceRequest {
  UserPreferences user_preference = 1;
}

// 注册请求
message RegisterRequest {
  string name = 1;
  string email = 2;
  string password_hash = 3;
  string captcha = 4;
}
message CaptchaRequest {
  string email = 1;
  string captcha = 2;
}

// 发送验证码请求
message SendCaptchaRequest {
  string email = 1;
}

// 空请求
message EmptyRequest {
}

// 布尔响应
message BoolResponse {
  bool success = 1;
  string message = 2;
}

// 注册响应
message RegisterResponse {
  string user_id = 1;
}

// 登录请求
message LoginRequest {
  string email = 1;
  string password_hash = 2;
}

// 登录响应
message LoginResponse {
  string access_token = 1;
  string refresh_token = 2;
}

// 获取用户信息请求
message GetUserByEmailRequest {
  string email = 1;
}

// 获取用户信息响应
message GetUserByEmailResponse {
  User user = 1;
}

// 获取用户设置请求
message GetUserSettingsRequest {
  string user_id = 1;
}

// 获取用户设置响应
message GetUserSettingsResponse {
  UserSettings user_settings = 1;
}

// 获取用户偏好请求
message GetUserPreferencesRequest {
  string user_id = 1;
}

// 获取用户偏好响应
message GetUserPreferencesResponse {
  UserPreferences user_preferences = 1;
}

// 刷新令牌请求
message RefreshTokenRequest {
  string user_id = 1;
  string refresh_token = 2;
}

// 刷新令牌响应
message RefreshTokenResponse {
  string access_token = 1;
  string refresh_token = 2;
}

// 登出请求
message LogoutRequest {
  string user_id = 1;
}

// 登出响应
message LogoutResponse {
  bool success = 1;
}

// 获取用户日志请求
message GetUserLogsRequest {
  string user_id = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message GetUserLogsResponse {
  repeated UserLogs user_logs = 1;
}

// 用户消息类型
message User {
  string id = 1;
  string name = 2;
  string email = 3;
  string phone = 4;
  string avatar = 5;
  string nickname = 6;
  uint64 member_ship_level = 7;
  google.protobuf.Timestamp membership_expire = 8;
  uint64 balance = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

// 用户设置
message UserSettings {
  string user_id = 1;
  string language_preference = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
}

// 用户偏好
message UserPreferences {
  string user_id = 1;
  string tech_area = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
}

// 用户日志
message UserLogs {
  uint64 id = 1;
  string user_id = 2;
  string action = 3;
  string ip_address = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}