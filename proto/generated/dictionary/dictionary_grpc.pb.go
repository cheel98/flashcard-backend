// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: proto/dictionary.proto

package dictionary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DictionaryService_CreateDictionary_FullMethodName                 = "/dictionary.DictionaryService/CreateDictionary"
	DictionaryService_GetDictionaryByUniqueTranslation_FullMethodName = "/dictionary.DictionaryService/GetDictionaryByUniqueTranslation"
	DictionaryService_GetDictionaryWithDetails_FullMethodName         = "/dictionary.DictionaryService/GetDictionaryWithDetails"
)

// DictionaryServiceClient is the client API for DictionaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Dictionary服务定义
type DictionaryServiceClient interface {
	// 创建词典记录
	CreateDictionary(ctx context.Context, in *CreateDictionaryRequest, opts ...grpc.CallOption) (*CreateDictionaryResponse, error)
	// 根据唯一翻译信息查询词典
	GetDictionaryByUniqueTranslation(ctx context.Context, in *GetDictionaryByUniqueTranslationRequest, opts ...grpc.CallOption) (*GetDictionaryByUniqueTranslationResponse, error)
	// 获取词典详细信息
	GetDictionaryWithDetails(ctx context.Context, in *GetDictionaryWithDetailsRequest, opts ...grpc.CallOption) (*GetDictionaryWithDetailsResponse, error)
}

type dictionaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDictionaryServiceClient(cc grpc.ClientConnInterface) DictionaryServiceClient {
	return &dictionaryServiceClient{cc}
}

func (c *dictionaryServiceClient) CreateDictionary(ctx context.Context, in *CreateDictionaryRequest, opts ...grpc.CallOption) (*CreateDictionaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDictionaryResponse)
	err := c.cc.Invoke(ctx, DictionaryService_CreateDictionary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) GetDictionaryByUniqueTranslation(ctx context.Context, in *GetDictionaryByUniqueTranslationRequest, opts ...grpc.CallOption) (*GetDictionaryByUniqueTranslationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDictionaryByUniqueTranslationResponse)
	err := c.cc.Invoke(ctx, DictionaryService_GetDictionaryByUniqueTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) GetDictionaryWithDetails(ctx context.Context, in *GetDictionaryWithDetailsRequest, opts ...grpc.CallOption) (*GetDictionaryWithDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDictionaryWithDetailsResponse)
	err := c.cc.Invoke(ctx, DictionaryService_GetDictionaryWithDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictionaryServiceServer is the server API for DictionaryService service.
// All implementations must embed UnimplementedDictionaryServiceServer
// for forward compatibility.
//
// Dictionary服务定义
type DictionaryServiceServer interface {
	// 创建词典记录
	CreateDictionary(context.Context, *CreateDictionaryRequest) (*CreateDictionaryResponse, error)
	// 根据唯一翻译信息查询词典
	GetDictionaryByUniqueTranslation(context.Context, *GetDictionaryByUniqueTranslationRequest) (*GetDictionaryByUniqueTranslationResponse, error)
	// 获取词典详细信息
	GetDictionaryWithDetails(context.Context, *GetDictionaryWithDetailsRequest) (*GetDictionaryWithDetailsResponse, error)
	mustEmbedUnimplementedDictionaryServiceServer()
}

// UnimplementedDictionaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDictionaryServiceServer struct{}

func (UnimplementedDictionaryServiceServer) CreateDictionary(context.Context, *CreateDictionaryRequest) (*CreateDictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictionary not implemented")
}
func (UnimplementedDictionaryServiceServer) GetDictionaryByUniqueTranslation(context.Context, *GetDictionaryByUniqueTranslationRequest) (*GetDictionaryByUniqueTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryByUniqueTranslation not implemented")
}
func (UnimplementedDictionaryServiceServer) GetDictionaryWithDetails(context.Context, *GetDictionaryWithDetailsRequest) (*GetDictionaryWithDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryWithDetails not implemented")
}
func (UnimplementedDictionaryServiceServer) mustEmbedUnimplementedDictionaryServiceServer() {}
func (UnimplementedDictionaryServiceServer) testEmbeddedByValue()                           {}

// UnsafeDictionaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictionaryServiceServer will
// result in compilation errors.
type UnsafeDictionaryServiceServer interface {
	mustEmbedUnimplementedDictionaryServiceServer()
}

func RegisterDictionaryServiceServer(s grpc.ServiceRegistrar, srv DictionaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedDictionaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DictionaryService_ServiceDesc, srv)
}

func _DictionaryService_CreateDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).CreateDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_CreateDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).CreateDictionary(ctx, req.(*CreateDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_GetDictionaryByUniqueTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryByUniqueTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).GetDictionaryByUniqueTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_GetDictionaryByUniqueTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).GetDictionaryByUniqueTranslation(ctx, req.(*GetDictionaryByUniqueTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_GetDictionaryWithDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryWithDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).GetDictionaryWithDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionaryService_GetDictionaryWithDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).GetDictionaryWithDetails(ctx, req.(*GetDictionaryWithDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DictionaryService_ServiceDesc is the grpc.ServiceDesc for DictionaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictionaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dictionary.DictionaryService",
	HandlerType: (*DictionaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDictionary",
			Handler:    _DictionaryService_CreateDictionary_Handler,
		},
		{
			MethodName: "GetDictionaryByUniqueTranslation",
			Handler:    _DictionaryService_GetDictionaryByUniqueTranslation_Handler,
		},
		{
			MethodName: "GetDictionaryWithDetails",
			Handler:    _DictionaryService_GetDictionaryWithDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dictionary.proto",
}
